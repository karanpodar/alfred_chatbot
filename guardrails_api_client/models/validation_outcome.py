# coding: utf-8

"""
    Guardrails API

    Guardrails CRUD API

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from guardrails_api_client.models.reask import Reask
from guardrails_api_client.models.validation_outcome_validated_output import ValidationOutcomeValidatedOutput
from guardrails_api_client.models.validation_summary import ValidationSummary
from typing import Set
from typing_extensions import Self

class ValidationOutcome(BaseModel):
    """
    The output from a Guard execution.
    """ # noqa: E501
    call_id: str = Field(description="Foreign key to the most recent Call this resulted from.", alias="callId")
    raw_llm_output: Optional[str] = Field(default=None, description="The raw, unchanged string content from the LLM call.", alias="rawLlmOutput")
    validation_summaries: Optional[List[ValidationSummary]] = Field(default=None, alias="validationSummaries")
    validated_output: Optional[ValidationOutcomeValidatedOutput] = Field(default=None, alias="validatedOutput")
    reask: Optional[Reask] = Field(default=None, description="If validation continuously fails and all allocated reasks are used, this field will contain the final reask that would have been sent to the LLM if additional reasks were available.")
    validation_passed: Optional[bool] = Field(default=None, description="A boolean to indicate whether or not the LLM output passed validation.  If this is False, the validated_output may be invalid.", alias="validationPassed")
    error: Optional[str] = Field(default=None, description="If the validation process raised a handleable exception, this field will contain the error message.")
    __properties: ClassVar[List[str]] = ["callId", "rawLlmOutput", "validationSummaries", "validatedOutput", "reask", "validationPassed", "error"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValidationOutcome from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in validation_summaries (list)
        _items = []
        if self.validation_summaries:
            for _item in self.validation_summaries:
                if _item:
                    _items.append(_item.to_dict() if hasattr(_item, "to_dict") and callable(_item.to_dict) else _item)
            _dict['validationSummaries'] = _items
        # override the default output from pydantic by calling `to_dict()` of validated_output
        if self.validated_output:
            _dict['validatedOutput'] = self.validated_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reask
        if self.reask:
            _dict['reask'] = self.reask.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValidationOutcome from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callId": obj.get("callId"),
            "rawLlmOutput": obj.get("rawLlmOutput"),
            "validationSummaries": [ValidationSummary.from_dict(_item) for _item in obj["validationSummaries"]] if obj.get("validationSummaries") is not None else None,
            "validatedOutput": ValidationOutcomeValidatedOutput.from_dict(obj["validatedOutput"]) if obj.get("validatedOutput") is not None else None,
            "reask": Reask.from_dict(obj["reask"]) if obj.get("reask") is not None else None,
            "validationPassed": obj.get("validationPassed"),
            "error": obj.get("error")
        })
        return _obj


