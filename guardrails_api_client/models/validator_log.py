# coding: utf-8

"""
    Guardrails API

    Guardrails CRUD API

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from guardrails_api_client.models.validator_log_instance_id import ValidatorLogInstanceId
from guardrails_api_client.models.validator_log_validation_result import ValidatorLogValidationResult
from typing import Set
from typing_extensions import Self

class ValidatorLog(BaseModel):
    """
    ValidatorLog
    """ # noqa: E501
    validator_name: str = Field(description="The class name of the validator.", alias="validatorName")
    registered_name: str = Field(description="The registry id of the validator.", alias="registeredName")
    instance_id: Optional[ValidatorLogInstanceId] = Field(default=None, alias="instanceId")
    property_path: str = Field(description="The JSON path to the property which was validated that produced this log.", alias="propertyPath")
    value_before_validation: object = Field(alias="valueBeforeValidation")
    value_after_validation: Optional[object] = Field(default=None, alias="valueAfterValidation")
    validation_result: Optional[ValidatorLogValidationResult] = Field(default=None, alias="validationResult")
    start_time: Optional[str] = Field(default=None, alias="startTime")
    end_time: Optional[str] = Field(default=None, alias="endTime")
    __properties: ClassVar[List[str]] = ["validatorName", "registeredName", "instanceId", "propertyPath", "valueBeforeValidation", "valueAfterValidation", "validationResult", "startTime", "endTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValidatorLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instance_id
        if self.instance_id:
            _dict['instanceId'] = self.instance_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_before_validation
        if self.value_before_validation:
            _dict['valueBeforeValidation'] = self.value_before_validation
        # override the default output from pydantic by calling `to_dict()` of value_after_validation
        if self.value_after_validation:
            _dict['valueAfterValidation'] = self.value_after_validation
        # override the default output from pydantic by calling `to_dict()` of validation_result
        if self.validation_result:
            _dict['validationResult'] = self.validation_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValidatorLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "validatorName": obj.get("validatorName"),
            "registeredName": obj.get("registeredName"),
            "instanceId": ValidatorLogInstanceId.from_dict(obj["instanceId"]) if obj.get("instanceId") is not None else None,
            "propertyPath": obj.get("propertyPath"),
            "valueBeforeValidation": obj.get("valueBeforeValidation"),
            "valueAfterValidation": obj.get("valueAfterValidation"),
            "validationResult": ValidatorLogValidationResult.from_dict(obj["validationResult"]) if obj.get("validationResult") is not None else None,
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime")
        })
        return _obj


