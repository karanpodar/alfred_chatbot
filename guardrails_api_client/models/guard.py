# coding: utf-8

"""
    Guardrails API

    Guardrails CRUD API

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from guardrails_api_client.models.call import Call
from guardrails_api_client.models.model_schema import ModelSchema
from guardrails_api_client.models.validator_reference import ValidatorReference
from typing import Set
from typing_extensions import Self

class Guard(BaseModel):
    """
    Guard
    """ # noqa: E501
    id: str = Field(description="The unique identifier for the Guard.")
    name: str = Field(description="The name for the Guard.")
    description: Optional[str] = Field(default=None, description="A description that concisely states the expected behaviour or purpose of the Guard.")
    validators: Optional[List[ValidatorReference]] = None
    output_schema: Optional[ModelSchema] = None
    history: Optional[List[Call]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "description", "validators", "output_schema", "history"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Guard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in validators (list)
        _items = []
        if self.validators:
            for _item in self.validators:
                if _item:
                    _items.append(_item.to_dict() if hasattr(_item, "to_dict") and callable(_item.to_dict) else _item)
            _dict['validators'] = _items
        # override the default output from pydantic by calling `to_dict()` of output_schema
        if self.output_schema:
            _dict['output_schema'] = self.output_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in history (list)
        _items = []
        if self.history:
            for _item in self.history:
                if _item:
                    _items.append(_item.to_dict())
            _dict['history'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Guard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "validators": [ValidatorReference.from_dict(_item) for _item in obj["validators"]] if obj.get("validators") is not None else None,
            "output_schema": ModelSchema.from_dict(obj["output_schema"]) if obj.get("output_schema") is not None else None,
            "history": [Call.from_dict(_item) for _item in obj["history"]] if obj.get("history") is not None else None
        })
        return _obj


