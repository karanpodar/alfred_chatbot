# coding: utf-8

"""
    Guardrails API

    Guardrails CRUD API

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from guardrails_api_client.models.error_span import ErrorSpan
from typing import Set
from typing_extensions import Self

class ValidationSummary(BaseModel):
    """
    ValidationSummary
    """ # noqa: E501
    validator_name: str = Field(description="The class name of the validator.", alias="validatorName")
    validator_status: str = Field(alias="validatorStatus")
    property_path: Optional[str] = Field(default=None, description="The JSON path to the property which was validated that produced this log.", alias="propertyPath")
    failure_reason: Optional[str] = Field(default=None, description="The error message indicating why validation failed.", alias="failureReason")
    error_spans: Optional[List[ErrorSpan]] = Field(default=None, alias="errorSpans")
    __properties: ClassVar[List[str]] = ["validatorName", "validatorStatus", "propertyPath", "failureReason", "errorSpans"]

    @field_validator('validator_status')
    def validator_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pass', 'fail']):
            raise ValueError("must be one of enum values ('pass', 'fail')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValidationSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_spans (list)
        _items = []
        if self.error_spans:
            for _item in self.error_spans:
                if _item:
                    _items.append(_item.to_dict() if hasattr(_item, "to_dict") and callable(_item.to_dict) else _item)
            _dict['errorSpans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValidationSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "validatorName": obj.get("validatorName"),
            "validatorStatus": obj.get("validatorStatus"),
            "propertyPath": obj.get("propertyPath"),
            "failureReason": obj.get("failureReason"),
            "errorSpans": [ErrorSpan.from_dict(_item) for _item in obj["errorSpans"]] if obj.get("errorSpans") is not None else None
        })
        return _obj


